version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
    environment:
      - PYTHONPATH=/app/src
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/agent_builder
      - AWS_ENDPOINT_URL=http://localstack:4566
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
      - LOG_LEVEL=DEBUG
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - REDIS_URL=redis://redis:6379/0
      - OPENSEARCH_URL=http://localstack:4566
    depends_on:
      db:
        condition: service_healthy
      dynamodb:
        condition: service_started
      localstack:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - agent_builder_network

  db:
    image: postgres:15.4
    environment:
      - POSTGRES_DB=agent_builder
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - agent_builder_network

  dynamodb:
    image: amazon/dynamodb-local:1.22.0
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-optimizeDbBeforeStartup"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - agent_builder_network

  localstack:
    image: localstack/localstack:2.3.0
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sqs,sns,eventbridge,lambda,opensearch
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - OPENSEARCH_ENDPOINT_STRATEGY=port
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - agent_builder_network

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - agent_builder_network

volumes:
  postgres_data:
    name: agent_builder_postgres_data
  localstack_data:
    name: agent_builder_localstack_data
  redis_data:
    name: agent_builder_redis_data

networks:
  agent_builder_network:
    driver: bridge
    name: agent_builder_network